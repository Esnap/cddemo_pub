# This file is a template, and might need editing before it works on your project.
---
# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
#
# This template will build and test your projects as well as create the documentation.
#
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.
# * Shows how to use multiple jobs in test stage for verifying functionality
#   with multiple JDKs.
# * Uses site:stage to collect the documentation for multi-module projects.
# * Publishes the documentation for `master` branch.

stages:
- verify-project
- test
- build_image
- deploy

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

# This will only validate and compile stuff and run e.g. maven-enforcer-plugin.
# Because some enforcer rules might check dependency convergence and class duplications
# we use `test-compile` here instead of `validate`, so the correct classpath is picked up.
verify-project:
  image: maven:3.3.9-jdk-8
  stage: verify-project
  script:
    - 'mvn $MAVEN_CLI_OPTS package'
  artifacts:
    paths:
    - 'target/cddemo-2.0.jar'

build_deploy-docker-image:
  image: docker:latest
  services:
    - docker:dind
  stage: build_image
  # Remember that even though the JAR file was built in a separate image
  #  Gitlab CI will make it available in this image because I specified it in artifacts
  #
  # All I really need to build the Docker image is the artifact(s) & Dockerfile
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build --no-cache=true -t registry.gitlab.com/esnap/cddemo_pub:2.0
    - docker push registry.gitlab.com/esnap/cddemo_pub
  dependencies:
    - verify-project
  only:
    - master

deploy-maven-package:
  image: maven:3.3.9-jdk-8
  stage: deploy
  script:
    - 'mvn deploy -s ci_settings.xml'
  artifacts:
    paths:
      - public
  only:
    - master